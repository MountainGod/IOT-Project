/**
 * <strong>Auth system overview:</strong><br>
 * users are saved on the cloud (firebase).
 * A user is identified by their User ID, which is automatically generated by firebase.
 * Only 1 user can be logged in at a time.
 * @author <a href="mailto:mountaingodrays@gmail.com">Harel Karni</a>
 * @fileOverview Contains authentication and authorization systems, including Page specific code.
 */

import {initializeApp} from "firebase/app";
import {getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword} from "firebase/auth";

import firebaseConfig from "./firebaseConfig.json";

// Initialize Firebase
const app     = initializeApp(firebaseConfig);
// Initialize Firebase Authentication and get a reference to the service
const auth    = getAuth(app);
// Set constants for local storage system
const userKey = "user";

/**
 * Handles user sign up process.
 * @param email the user's email
 * @param password the user's password
 */
async function signUp(email, password) {
	return createUserWithEmailAndPassword(auth, email, password)
	.then((userCred) => {
		window.sessionStorage.setItem(userKey, JSON.stringify(userCred.user));
	});
}

/**
 * Handles user login process.
 * @param email the user's email
 * @param password the user's password
 */
async function login(email, password) {
	return signInWithEmailAndPassword(auth, email, password)
	.then((userCred) => {
		window.sessionStorage.setItem(userKey, JSON.stringify(userCred.user));
	});
}

/**
 * Check if the user is logged in.
 * @returns {boolean} whether the user is logged in or not.
 */
export function isLoggedIn() {
	return window.sessionStorage.getItem(userKey) !== null;
}

/**
 * Logs the current user off.
 */
export async function logOff() {
	auth.signOut().then(() => {
		window.sessionStorage.removeItem("user");
	});
}

/**
 * Fetches the current logged in user's email.
 * @returns {string} the user's email.
 */
export function getUserEmail() {
	return JSON.parse(window.sessionStorage.getItem(userKey)).email;
}

/**
 * Fetches the current logged in user's ID.
 * @returns {string} the user's ID.
 */
export function getUserID() {
	return JSON.parse(window.sessionStorage.getItem(userKey)).uid;
}

// Page specific code
/**
 * Change color of email input element and present a message element when a bad email is entered.
 * @param undo whether to undo the changes this function does.
 */
function handleInvalidEmail(undo = false) {
	const email        = document.getElementById("email");
	const emailInvalid = document.getElementById("emailInvalid");
	
	if (undo) {
		email.classList.remove("bg-danger", "border-danger");
		emailInvalid.hidden = true;
	}
	else {
		email.classList.add("bg-danger", "border-danger");
		emailInvalid.hidden = false;
	}
}

/**
 * Change color of email input element and present a message element when an already used email is entered.
 * @param undo whether to undo the changes this function does.
 */
function handleUserAlreadyExists(undo = false) {
	const email       = document.getElementById("email");
	const emailExists = document.getElementById("emailExists");
	
	if (undo) {
		email.classList.remove("bg-danger", "border-danger");
		emailExists.hidden = true;
	}
	else {
		email.classList.add("bg-danger", "border-danger");
		emailExists.hidden = false;
	}
}

/**
 * Change color of password input element when a weak one is entered.
 * This function should never be activated, input validation should be used.
 * @param undo whether to undo the changes this function does.
 */
function handleWeakPassword(undo = false) {
	const password   = document.getElementById("pwd");
	const pwdInvalid = document.getElementById("pwdInvalid");
	
	if (undo) {
		password.classList.remove("bg-danger", "border-danger");
		pwdInvalid.hidden = true;
	}
	else {
		password.classList.add("bg-danger", "border-danger");
		pwdInvalid.hidden = false;
		console.error("handleWeakPassword was called");
	}
}

/**
 * Show wrong login prompt and clear the password field.
 * @param undo whether to undo the changes this function does.
 */
function handleWrongLogin(undo = false) {
	const password       = document.getElementById("pwd");
	// const email          = document.getElementById("email");
	const loginWrongText = document.getElementById("loginWrongText");
	if (undo) {
		loginWrongText.hidden = true;
	}
	else {
		password.value        = "";
		loginWrongText.hidden = false;
	}
}

/**
 * Call the correct function when receiving an error from firebase.
 * @param error the error received from firebase.
 */
function handleFirebaseError(error) {
	switch (error.code) {
		case "auth/invalid-email":
			handleInvalidEmail();
			break;
		case "auth/weak-password":
			handleWeakPassword();
			break;
		case "auth/email-already-in-use":
			handleUserAlreadyExists();
			break;
		case "auth/user-not-found":
		case "auth/wrong-password":
			handleWrongLogin();
			break;
		default:
			window.alert(`An unknown error occurred when connecting to the server.\nError code: ${error.code}.`);
			break;
	}
}

// Separation between login and sign up is kept for ease of future changes.
if (document.title.toLowerCase() === "sign up") {
	const signUpForm = document.getElementById("signUpForm");
	const signUpBtn  = document.getElementById("signUpBtn");
	const password   = document.getElementById("pwd");
	const email      = document.getElementById("email");
	
	const handlePasswordValidation = () => {
		const pwdLengthItem       = document.getElementById("pwdLengthListItem");
		const pwdAlphanumericItem = document.getElementById("pwdAlphanumericListItem");
		const pwdSpecialItem      = document.getElementById("pwdSpecialListItem");
		
		let passed = true;
		
		if (password.value.length >= 8) {
			pwdLengthItem.classList.remove("text-danger");
			pwdLengthItem.classList.add("text-success");
		}
		else {
			pwdLengthItem.classList.remove("text-success");
			pwdLengthItem.classList.add("text-danger");
			passed = false;
		}
		
		if (/\d/.test(password.value) && /[a-zA-Z]/.test(password.value)) {
			pwdAlphanumericItem.classList.remove("text-danger");
			pwdAlphanumericItem.classList.add("text-success");
		}
		else {
			pwdAlphanumericItem.classList.remove("text-success");
			pwdAlphanumericItem.classList.add("text-danger");
			passed = false;
		}
		
		if (/[^a-zA-Z\d:]/.test(password.value)) {
			pwdSpecialItem.classList.remove("text-warning");
			pwdSpecialItem.classList.add("text-success");
		}
		else {
			pwdSpecialItem.classList.remove("text-success");
			pwdSpecialItem.classList.add("text-warning");
		}
		
		if (passed) {
			signUpBtn.classList.remove("disabled");
		}
		else {
			signUpBtn.classList.add("disabled");
		}
	};
	
	signUpBtn.addEventListener("click", () => {
		if (signUpForm.reportValidity()) {
			signUp(email.value, password.value)
			.then(() => {
				signUpForm.submit();
			}, handleFirebaseError);
		}
	});
	
	signUpForm.addEventListener("keypress", (keyEvent) => {
		switch (keyEvent.key) {
			case "Enter":
				if (!signUpBtn.classList.contains("disabled")) {
					signUpBtn.click();
				}
				break;
			default:
				break;
		}
	});
	
	email.addEventListener("input", () => {
		handleInvalidEmail(true);
		handleUserAlreadyExists(true);
	});
	password.addEventListener("input", () => {
		handleWeakPassword(true);
		handlePasswordValidation();
	});
}
else if (document.title.toLowerCase() === "log in") {
	const loginForm = document.getElementById("loginForm");
	const loginBtn  = document.getElementById("loginBtn");
	const password  = document.getElementById("pwd");
	const email     = document.getElementById("email");
	
	loginBtn.addEventListener("click", () => {
		if (loginForm.reportValidity()) {
			login(email.value, password.value)
			.then(() => {
				loginForm.submit();
			}, handleFirebaseError);
		}
	});
	
	email.addEventListener("input", () => {
		handleWrongLogin(true);
	});
	password.addEventListener("input", () => {
		handleWrongLogin(true);
	});
	
	loginForm.addEventListener("keypress", (keyEvent) => {
		switch (keyEvent.key) {
			case "Enter":
				loginBtn.click();
				break;
			default:
				break;
		}
	});
}